<h1>簡介</h1><p>2018 Fall 計算機程式與電腦輔助設計實習課程分組網站</p><p>仔細檢視目前正在上的課程, 以計算機程式為例, 我們上這門課到底有甚麼用?</p><p>學會使用&nbsp; git 指令有甚麼用?</p><p>學會使用&nbsp; Github 有甚麼用?</p><p>學會編寫網際 Python 程式, 有甚麼用?</p><p>學會使用 PyQt5 建立視窗套件程式, 有甚麼用?</p><p>上課老師自己到底如何使用他 (她) 一直強調非常重要的內容, 平常他們自己到底有沒有在運作這些上課的內容?</p><p>好奇心的驅使, 我們來到大學, 不就是想要凡事追根究底, 絕對不是來打混的, 對不?</p><p>:-)</p><p>cpgx 網站: <a href="https://cpgx.kmol.info" rel="nofollow">https://cpgx.kmol.info</a></p><p>cpgx 投影片: <a href="https://cpgx.kmol.info/reveal/" rel="nofollow">https://cpgx.kmol.info/reveal/</a></p><p>cpgx 網站: <a href="https://cpgx.kmol.info/blog/" rel="nofollow">https://cpgx.kmol.info/blog/</a></p><p>世界排名前 10 名的大學, 如何教計算機程式課程?</p><p><a href="https://www.cs.cmu.edu/~112/">https://www.cs.cmu.edu/~112/</a>&nbsp; (2018 Fall)</p><p><a href="http://stanfordpython.com/">Stanford 2017</a></p><p><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/">MIT 2016 Fall</a></p><p><a href="https://help.uis.cam.ac.uk/service/help-support/training/downloads/course-files/programming-student-files/python-courses/pythonab/pythonab-files/python3-notes.pdf">Cambridge Python3 notes</a></p><h2>建立 Github 帳號</h2>
<p>1. Go to the&nbsp;<a href="https://github.com/join">GitHub sign up page</a>.</p>
<p><img src="/images/Join-github-1.jpg" width="600" height="456" alt=""></p>
<p>2. Enter a username, valid email address, and password.Use at least one lowercase letter, one numeral, and seven characters.</p>
<p><img src="/images/Join-github-2.jpg" width="600" height="573" alt=""></p>
<p>3.&nbsp;Review carefully the <a href="http://help.github.com/terms/">GitHub Terms of Service</a> and <a href="http://help.github.com/privacy/">Privacy Policy</a> before continuing. Upon clicking the &ldquo;Create an account&rdquo; button you will simultaneously be agreeing to these documents.</p>
<p><img src="/images/Join-github-4.jpg" width="600" height="423" alt=""></p>
<p>4.&nbsp;Choose a plan. You have two choice: Free and paid, the paid version has private repositories with $7/month. You should try the free version then have the suitable choice.</p>
<p><img src="/images/Join-github-5.jpg" width="600" height="506" alt=""></p>
<p>5. 登入所登記的 email 帳號, verify 電子郵件信箱後起啟用 Github 帳號.</p>
<h4>參考資料</h4>
<p><a href="https://kopu.chat/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-1/">git 新手入門</a></p>
<p><a href="https://git-scm.com/book/zh-tw/v2/GitHub-%E5%BB%BA%E7%AB%8B%E5%B8%B3%E6%88%B6%E5%8F%8A%E8%A8%AD%E5%AE%9A">建立 Github 帳號及設定</a></p>
<p><a href="http://blog.kevinlinul.idv.tw/?p=369">http://blog.kevinlinul.idv.tw/?p=369</a>&nbsp;</p>
<p><a href="https://github.com/twtrubiks/Git-Tutorials">https://github.com/twtrubiks/Git-Tutorials</a>&nbsp;</p><h2>CMSimfly 網站</h2>
<p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p><h2>reveal 投影片</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/reveal.leo</p><h2>pelican 網誌</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/pelican.leo&nbsp;</p>
<p>各分組必須自行更改&nbsp;@edit pelicanconf.py 中的 AUTHOR 與 SITENAME</p>
<p>更改 @edit publishconf.py 中的 SITEURL</p>
<p></p><h1>組員操作影片</h1>
<p>每週各分組組員必須將參與分組協同過程之電腦操作流程錄成影片後, 上傳至各自的 Youtube 帳號區, 並嵌入各分組網站頁面中.</p><h2>Week1</h2>
<p><span>國立虎尾科技大學機械設計工程系計算機程式 - 一乙第八週第三部分, 說明如何利用 Eric6 IDE 建立所需的 calculator 計算機程式對話表單. 過程中主要學習如何啟動 Eric6, 如何建立 Eric6 專案, 如何切換 Sources tab 與 Form tab, 如何在進入 Qt Designer 後利用格點布局, 建立按鈕與 Line Edit 部件.</span></p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/g4ksXq7sQ4M" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"></iframe></p>
<h1>Python 手冊</h1>
<p>計算機程式教材:&nbsp;&nbsp;<a href="http://mde.tw/cp2018/content/">http://mde.tw/cp2018/content/</a>&nbsp;</p>
<p>可攜程式下載: <a href="https://drive.google.com/file/d/1DWtyoUhl8CycKJ8uulB3viRXE39KqpE1/view?usp=sharing">p37.7z</a></p>
<h4>線上 Python 程式執行</h4>
<!-- 啟動 Brython 時, 設定 pythonpath 為 data/py, 並將 script1.py 放入, 以便取代 3.2.9 之前版本的 script id 導入 -->
<p>
<script>
window.onload=function(){
brython({debug:1});
}
</script>
</p>
<!-- 導入 FileSaver 與 filereader -->
<p>
<script type="text/javascript" src="/static/ace/FileSaver.min.js"></script>
<script type="text/javascript" src="/static/ace/filereader.js"></script>
</p>
<!-- 導入 ace -->
<p>
<script type="text/javascript" src="/static/ace/ace.js"></script>
<script type="text/javascript" src="/static/ace/ext-language_tools.js"></script>
<script type="text/javascript" src="/static/ace/mode-python3.js"></script>
<script type="text/javascript" src="/static/ace/snippets/python.js"></script>
</p>
<!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱-->
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>使用者可以利用以下程式列出所使用 Python 的版次與關鍵字:</p>
<!-- 印出版次與關鍵字程式 -->
<p>
<script type="text/python3">
import sys
import time
import traceback
import javascript
from browser import document as doc, window, alert

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

class cOutput:

    def __init__(self, target):
        self.target = doc[target]

    def write(self, data):
        self.target.value += str(data)

class Editor():
    
    def __init__(self, editor_id, console_id, container_id, storage_id):
        self.editor_id = editor_id
        self.console_id = console_id
        self.container_id = container_id
        self.storage_id = storage_id
        self.output = ''

        try:
            self.editor = window.ace.edit(self.editor_id)
            session = self.editor.getSession()
            session.setMode("ace/mode/python")

            self.editor.setOptions({
             'enableLiveAutocompletion': True,
             'enableSnippets': True,
             'highlightActiveLine': False,
             'highlightSelectedWord': True,
             'autoScrollEditorIntoView': True,
             # 'maxLines': session.getLength() 可以根據程式長度設定 editor 列數
             # 設定讓使用者最多可以在畫面中顯示 20 行程式碼
             'maxLines': 20,
             'fontSize': '12pt'
            })
        except:
            from browser import html
            self.editor = html.TEXTAREA(rows=20, cols=70)
            doc[self.editor_id] <= self.editor
            def get_value(): return self.editor.value
            def set_value(x): self.editor.value = x
            self.editor.getValue = get_value
            self.editor.setValue = set_value
            
    def run(self, *args):
        sys.stdout = cOutput(self.console_id)
        sys.stderr = cOutput(self.console_id)
        doc[self.console_id].value = ''
        src = self.editor.getValue()
        if storage is not None:
           storage[self.storage_id] = src

        t0 = time.perf_counter()
        try:
            #ns = {'__name__':'__main__'}
            # 以 self.editor_id 名稱執行程式
            ns = {'__name__': self.editor_id}
            exec(src, ns)
            state = 1
        except Exception as exc:
            traceback.print_exc(file=sys.stderr)
            state = 0
        self.output = doc[self.console_id].value

        print('<completed in %6.2f ms>' % ((time.perf_counter() - t0) * 1000.0))
        return state

    def show_console(self, ev):
        doc[self.console_id].value = self.output
        doc[self.console_id].cols = 60
        doc[self.console_id].rows = 10
        
    def clear_console(self, ev):
        doc[self.console_id].value = ""
        
    def clear_container(self, ev):
        doc[self.container_id].clear()

    # load a Python script
    def load_script(self, evt):
        _name = evt.target.value + '?foo=%s' % time.time()
        self.editor.setValue(open(_name).read())

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<!-- 用來顯示程式碼的 editor 區域 -->
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --><form><label>Filename: <input type="text" id="kw_filename" placeholder="input file name">.py</label> <input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea id="kw_console" autocomplete="off"></textarea></div><h1>OnShape 手冊</h1>
<p><a href="https://www.onshape.com/">https://www.onshape.com/</a>&nbsp;</p>
<p>電腦輔助設計實習課程教材:&nbsp;<a href="http://mde.tw/cadp2018/content/">http://mde.tw/cadp2018/content/</a>&nbsp;</p><h1>Fusion 360</h1>
<p><a href="https://www.autodesk.com/products/fusion-360/students-teachers-educators">https://www.autodesk.com/products/fusion-360/students-teachers-educators</a>&nbsp;</p>