<h1>簡介</h1><p>本網站為國立虎尾科技大學機械設計工程系, 2018 Fall 計算機程式與電腦輔助設計實習課程分組示範網站</p><p><span>本網站根據</span><a href="https://github.com/mdecourse/cp2018/wiki/2018-Fall--%E5%88%86%E7%B5%84%E5%8D%94%E5%90%8C%E6%B5%81%E7%A8%8B">分組協同流程</a><span>說明, 複製&nbsp;</span><a href="https://github.com/mdecourse/2018fall">2018fall</a><span>&nbsp;倉儲, 所逐建立的示範網站, 使用者可以從<a href="https://github.com/scrum-1/scrum-1.github.io/commits/master">倉儲提交歷程</a>中, 了解本網站建構過程.</span></p><p><span>機械設計過程是一個資料密集的流程, 除了牽涉傳統機械相關技術, 包含口語、文字、2D/3D、數學與實體模型資料外, 通常還涵蓋電子感測, 電機致動與資訊整合相關資料, 因此採用分散式版本管理系統, 來因應流程中,各協同團隊所附加的內容, 已經成為必要條件.</span></p><h4><span>課程檢視</span></h4><p>仔細檢視計算機程式課程中的內容, 我們上這門課到底有甚麼用?</p><p>學會使用&nbsp; git 指令有甚麼用?</p><p>學會使用&nbsp; Github 有甚麼用?</p><p>學會編寫網際 Python 程式, 有甚麼用?</p><p>學會使用 PyQt5 建立視窗套件程式, 有甚麼用?</p><p>本網站對應倉儲:&nbsp;<a href="https://github.com/scrum-1/scrum-1.github.io">https://github.com/scrum-1/scrum-1.github.io</a>&nbsp;</p><p>cpgx 網站: <a href="https://cpgx.kmol.info" rel="nofollow">https://cpgx.kmol.info</a></p><p>cpgx 投影片: <a href="https://cpgx.kmol.info/reveal/" rel="nofollow">https://cpgx.kmol.info/reveal/</a></p><p>cpgx 網站: <a href="https://cpgx.kmol.info/blog/" rel="nofollow">https://cpgx.kmol.info/blog/</a></p><h4>計算機程式參考資料</h4><p>世界排名前 10 名的大學, 如何教計算機程式課程?</p><p><a href="https://www.cs.cmu.edu/~112/">https://www.cs.cmu.edu/~112/</a>&nbsp; (2018 Fall)</p><p><a href="http://stanfordpython.com/">Stanford 2017</a></p><p><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/">MIT 2016 Fall</a></p><p><a href="https://help.uis.cam.ac.uk/service/help-support/training/downloads/course-files/programming-student-files/python-courses/pythonab/pythonab-files/python3-notes.pdf">Cambridge Python3 notes</a></p><h2>建立 Github 帳號</h2>
<p>1. Go to the&nbsp;<a href="https://github.com/join">GitHub sign up page</a>.</p>
<p><img src="/images/Join-github-1.jpg" width="600" height="456" alt=""></p>
<p>2. Enter a username, valid email address, and password.Use at least one lowercase letter, one numeral, and seven characters.</p>
<p><img src="/images/Join-github-2.jpg" width="600" height="573" alt=""></p>
<p>3.&nbsp;Review carefully the <a href="http://help.github.com/terms/">GitHub Terms of Service</a> and <a href="http://help.github.com/privacy/">Privacy Policy</a> before continuing. Upon clicking the &ldquo;Create an account&rdquo; button you will simultaneously be agreeing to these documents.</p>
<p><img src="/images/Join-github-4.jpg" width="600" height="423" alt=""></p>
<p>4.&nbsp;Choose a plan. You have two choice: Free and paid, the paid version has private repositories with $7/month. You should try the free version then have the suitable choice.</p>
<p><img src="/images/Join-github-5.jpg" width="600" height="506" alt=""></p>
<p>5. 登入所登記的 email 帳號, verify 電子郵件信箱後起啟用 Github 帳號.</p>
<h4>參考資料</h4>
<p><a href="https://kopu.chat/2017/01/18/git%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-part-1/">git 新手入門</a></p>
<p><a href="https://git-scm.com/book/zh-tw/v2/GitHub-%E5%BB%BA%E7%AB%8B%E5%B8%B3%E6%88%B6%E5%8F%8A%E8%A8%AD%E5%AE%9A">建立 Github 帳號及設定</a></p>
<p><a href="http://blog.kevinlinul.idv.tw/?p=369">http://blog.kevinlinul.idv.tw/?p=369</a>&nbsp;</p>
<p><a href="https://github.com/twtrubiks/Git-Tutorials">https://github.com/twtrubiks/Git-Tutorials</a>&nbsp;</p><h2>CMSimfly 網站</h2>
<p>各組必須自行更改 Config 中的網站標題, 且每次完成近端動態網頁編輯後, 以 generate_pages 按鈕, 將動態網頁資料轉為靜態網頁資料, 之後再新增、提交並推送到遠端倉儲.</p><h2>reveal 投影片</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/reveal.leo</p><h2>pelican 網誌</h2>
<p>以 <a href="http://www.leoeditor.com/">Leo Editor</a> 開啟 config/pelican.leo&nbsp;</p>
<p>各分組必須自行更改&nbsp;@edit pelicanconf.py 中的 AUTHOR 與 SITENAME</p>
<p>更改 @edit publishconf.py 中的 SITEURL</p>
<p></p><h1>W1-W9</h1>
<h4>計算機程式</h4>
<p>由於分組協同過程需要各學員充分了解如何使用 Git 與 Github, 因此在各班分組協同之前, 各學員必須:</p>
<p>以 s 加上學號, 利用學校所配發的 Gmail 郵箱, 建立 Github 帳號</p>
<p>各學員在隨身碟中建立 p37 可攜程式系統</p>
<p>git clone&nbsp;<a href="https://github.com/mdecourse/2018fall">https://github.com/mdecourse/2018fall</a></p>
<p>在各自的隨身碟中啟動 2018fall, 了解如何修改內容</p>
<p>建立 s學號.github.io 網站</p>
<p>設法將 2018fall 內容放入 s學號.github.io 網站中</p>
<p>確定每一位學員均已充分了解如何在近端與遠端模式下修改 s帳號.github.io 網站內容, 待第十週起, 每六人一組執行計算機程式專案. 詳細說明請參考<a href="https://github.com/mdecourse/cp2018/wiki/2018-Fall--%E5%88%86%E7%B5%84%E5%8D%94%E5%90%8C%E6%B5%81%E7%A8%8B">分組協同流程</a>.</p>
<p>註: 為何 Github 帳號要使用 s 加上學號? 原因是: 若要在自建的 Ubuntu 主機建立各學員對應帳號時, 不能利用純數字組成的字串作為用戶帳號, 而需以 s 加上學號作為帳號. 目的在兩個系統中採相同格式的帳號.</p>
<h4>電腦輔助設計實習</h4>
<p>各學員在隨身碟中建立 p37 可攜程式系統</p>
<p>請各學員在既有的 Github 帳號下, 建立 "帳號.github.io" 倉儲, 可以直接在 master 分支中使用 Github Pages.</p>
<p>git clone&nbsp;<a href="https://github.com/mdecourse/2018fall">https://github.com/mdecourse/2018fall</a></p>
<p>在各自的隨身碟中啟動 2018fall, 了解如何修改內容</p>
<p>建立 s學號.github.io 網站</p>
<p>設法將 2018fall 內容放入 s學號.github.io 網站中</p>
<p>確定每一位學員均已充分了解如何在近端與遠端模式下修改 s帳號.github.io 網站內容, 待第十週起, 每六人一組執行計算機程式專案. 詳細說明請參考<a href="https://github.com/mdecourse/cp2018/wiki/2018-Fall--%E5%88%86%E7%B5%84%E5%8D%94%E5%90%8C%E6%B5%81%E7%A8%8B">分組協同流程</a>.</p>
<h1>W10-W18</h1>
<p>自第十週起, 各班將以每六人一組開始執行分組專案, 各組組長必須在 Github 帳號下, 根據組序建立分組倉儲, 以 CP 課程甲班第一組為例, 該分組倉儲名稱為 cpag1, 若為 CADP 課程甲班第一組, 則該分組倉儲名稱為 cadpag1, 均以小寫字母命名.</p>
<p>若為 CP 課程車輛系第一組為例, 則該分組倉儲名稱為 vcpg1, 以小寫字母命名.</p>
<p>分組倉儲建立後, 必須額外建立 gh-pages 分支, 然後利用 settings 將 default branch 設為 gh-pages 後儲存設定. 之後各組的分組網站將為:</p>
<h4>計算機程式</h4>
<p><a href="https://s學">https://s學</a>號.github.io/cpag1 最後將會設為 cpag1.kmol.info</p>
<p><a href="https://s學">https://s學</a>號.github.io/vcpg1&nbsp;最後將會設為 vcpg1.kmol.info</p>
<h4>電腦輔助設計實習</h4>
<p><a href="https://學">https://學</a>號.github.io/cadpag1 最後將會設為 cadpag1.kmol.info</p>
<p>完成分組後, 各組學員必須 git clone 各分組倉儲後, 以 pull requests 進行協同.</p><h1>組員操作影片</h1>
<p>每週各分組組員必須將參與分組協同過程之電腦操作流程錄成影片後, 上傳至各自的 Youtube 帳號區, 並嵌入各分組網站頁面中.</p><h2>Week1</h2>
<p><span>國立虎尾科技大學機械設計工程系計算機程式 - 一乙第八週第三部分, 說明如何利用 Eric6 IDE 建立所需的 calculator 計算機程式對話表單. 過程中主要學習如何啟動 Eric6, 如何建立 Eric6 專案, 如何切換 Sources tab 與 Form tab, 如何在進入 Qt Designer 後利用格點布局, 建立按鈕與 Line Edit 部件.</span></p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/g4ksXq7sQ4M" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"></iframe></p>
<h1>Python 手冊</h1>
<p>計算機程式教材:&nbsp;&nbsp;<a href="http://mde.tw/cp2018/content/">http://mde.tw/cp2018/content/</a>&nbsp;</p>
<p>可攜程式下載: <a href="https://drive.google.com/file/d/1DWtyoUhl8CycKJ8uulB3viRXE39KqpE1/view?usp=sharing">p37.7z</a></p>
<h4>線上 Python 程式執行</h4>
<!-- 啟動 Brython 時, 設定 pythonpath 為 /static/, 並將共用 .py 放入, 可以在隨後的程式中導入使用 -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<!-- 導入 FileSaver 與 filereader -->
<p>
<script type="text/javascript" src="/static/ace/FileSaver.min.js"></script>
<script type="text/javascript" src="/static/ace/filereader.js"></script>
</p>
<!-- 導入 ace -->
<p>
<script type="text/javascript" src="/static/ace/ace.js"></script>
<script type="text/javascript" src="/static/ace/ext-language_tools.js"></script>
<script type="text/javascript" src="/static/ace/mode-python3.js"></script>
<script type="text/javascript" src="/static/ace/snippets/python.js"></script>
</p>
<!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱-->
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>使用者可以利用以下編輯區執行 Brython 程式:</p>
<!-- 印出版次與關鍵字程式 -->
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<!-- 用來顯示程式碼的 editor 區域 -->
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --><form><label>Filename: <input type="text" id="kw_filename" placeholder="input file name">.py</label> <input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea id="kw_console" autocomplete="off"></textarea></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
import ace

def keyword(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['keyword'].bind('click',keyword)
</script>
</p>
<!-- ****************************** keyword end -->
<p></p>
<!-- ****************************** for1 start -->
<p>
<script type="text/python3">
from browser import document as doc
import ace

def for1(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''#for1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['for1'].bind('click',for1)
</script>
<!-- ****************************** for1 end --></p>
<p><!-- ***************************** hello start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 hello
hello = beditor.editor("""# 定義 helloWorld 函式, 然後呼叫執行
def helloWorld():
    print("Hello World!")
    # 同行列印
    print("first string ", end="")
    print("second string")

helloWorld()
""")
# id 為 "hello" 的按鈕點按時, 執行 hello 物件中的 prog 方法
doc["hello"].bind('click', hello.prog)
</script>
<!-- ***************************** hello end --></p>
<!-- ***************************** input start -->
<p>
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 inputEx
inputEx = beditor.editor("""# 利用 input() 取使用者輸入
name = input("Enter your name: ")
print("Your name is:", name)
#x = int(input("Enter a number: "))
#print("One half of", x, "=", x/2)
""")
# id 為 "inputEx" 的按鈕點按時, 執行 inputEx 物件中的 prog 方法
doc["inputEx"].bind('click', inputEx.prog)
</script>
</p>
<!-- ***************************** input end -->
<p></p>
<!-- ***************************** math start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
inputEx = beditor.editor("""# 導入 math 模組後, 使用模組方法
import math
print(math.factorial(20))
""")
doc["mathEx"].bind('click', inputEx.prog)
</script>
</p>
<!-- ***************************** math end -->
<p><button id="keyword">keyword</button><button id="for1">for1</button><button id="hello">hello</button><button id="inputEx">input</button><button id="mathEx">math</button></p>
<p>上述 html 中的 Brython 對應程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 導入 FileSaver 與 filereader --&gt;
&lt;p&gt;
&lt;script type="text/javascript" src="/static/ace/FileSaver.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/ace/filereader.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 導入 ace --&gt;
&lt;p&gt;
&lt;script type="text/javascript" src="/static/ace/ace.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/ace/ext-language_tools.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/ace/mode-python3.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/ace/snippets/python.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;使用者可以利用以下編輯區執行 Brython 程式:&lt;/p&gt;
&lt;!-- 印出版次與關鍵字程式 --&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;
&lt;div id="kw_editor" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;form&gt;&lt;label&gt;Filename: &lt;input type="text" id="kw_filename" placeholder="input file name"&gt;.py&lt;/label&gt; &lt;input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"&gt;&lt;/form&gt;
&lt;p&gt;&lt;button id="kw_run"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console"&gt;清除&lt;/button&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea id="kw_console" autocomplete="off"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- ****************************** keyword start --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

def keyword(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['keyword'].bind('click',keyword)
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- ****************************** keyword end --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- ****************************** for1 start --&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

def for1(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''#for1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['for1'].bind('click',for1)
&lt;/script&gt;
&lt;!-- ****************************** for1 end --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- ***************************** hello start --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 hello
hello = beditor.editor("""# 定義 helloWorld 函式, 然後呼叫執行
def helloWorld():
    print("Hello World!")
    # 同行列印
    print("first string ", end="")
    print("second string")

helloWorld()
""")
# id 為 "hello" 的按鈕點按時, 執行 hello 物件中的 prog 方法
doc["hello"].bind('click', hello.prog)
&lt;/script&gt;
&lt;!-- ***************************** hello end --&gt;&lt;/p&gt;
&lt;!-- ***************************** input start --&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 inputEx
inputEx = beditor.editor("""# 利用 input() 取使用者輸入
name = input("Enter your name: ")
print("Your name is:", name)
#x = int(input("Enter a number: "))
#print("One half of", x, "=", x/2)
""")
# id 為 "inputEx" 的按鈕點按時, 執行 inputEx 物件中的 prog 方法
doc["inputEx"].bind('click', inputEx.prog)
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- ***************************** input end --&gt;
&lt;p&gt;&lt;/p&gt;
&lt;!-- ***************************** math start --&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import beditor
inputEx = beditor.editor("""# 導入 math 模組後, 使用模組方法
import math
print(math.factorial(20))
""")
doc["mathEx"].bind('click', inputEx.prog)
&lt;/script&gt;
&lt;/p&gt;
&lt;!-- ***************************** math end --&gt;
&lt;p&gt;&lt;button id="keyword"&gt;keyword&lt;/button&gt;&lt;button id="for1"&gt;for1&lt;/button&gt;&lt;button id="hello"&gt;hello&lt;/button&gt;&lt;button id="inputEx"&gt;input&lt;/button&gt;&lt;button id="mathEx"&gt;math&lt;/button&gt;&lt;/p&gt;</pre>
<p></p><h2>CMU15-112</h2>
<p>Getting Started:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-getting-started.html">https://www.cs.cmu.edu/~112/notes/notes-getting-started.html</a></p>
<p>Data and Expression:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-data-and-exprs.html">https://www.cs.cmu.edu/~112/notes/notes-data-and-exprs.html</a>&nbsp;</p>
<p>Functions:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-writing-functions.html">https://www.cs.cmu.edu/~112/notes/notes-writing-functions.html</a>&nbsp;</p>
<p>Conditionals:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-conditionals.html">https://www.cs.cmu.edu/~112/notes/notes-conditionals.html</a>&nbsp;</p>
<p>Loops:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-loops.html">https://www.cs.cmu.edu/~112/notes/notes-loops.html</a>&nbsp;</p>
<p>Debugging: <a href="https://www.cs.cmu.edu/~112/notes/notes-debugging.html">https://www.cs.cmu.edu/~112/notes/notes-debugging.html</a>&nbsp;</p>
<p>Testing and Exceptions:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-testing-and-exceptions.html">https://www.cs.cmu.edu/~112/notes/notes-testing-and-exceptions.html</a>&nbsp;</p>
<p>Strings:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-strings.html">https://www.cs.cmu.edu/~112/notes/notes-strings.html</a>&nbsp;</p>
<p>Algorithmic Thinking:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html">https://www.cs.cmu.edu/~112/notes/notes-algorithmic-thinking.html</a>&nbsp;</p>
<p>Style:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-style.html">https://www.cs.cmu.edu/~112/notes/notes-style.html</a>&nbsp;</p>
<p>1D Lists and Tuples:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html">https://www.cs.cmu.edu/~112/notes/notes-1d-lists.html</a>&nbsp;</p>
<p>2D Lists:&nbsp;<a href="https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html">https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html</a>&nbsp;</p>
<h4>線上 Python 程式執行</h4>
<!-- 啟動 Brython 時, 設定 pythonpath 為 /static/, 並將共用 .py 放入, 可以在隨後的程式中導入使用 -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<!-- 導入 FileSaver 與 filereader -->
<p>
<script type="text/javascript" src="/static/ace/FileSaver.min.js"></script>
<script type="text/javascript" src="/static/ace/filereader.js"></script>
</p>
<!-- 導入 ace -->
<p>
<script type="text/javascript" src="/static/ace/ace.js"></script>
<script type="text/javascript" src="/static/ace/ext-language_tools.js"></script>
<script type="text/javascript" src="/static/ace/mode-python3.js"></script>
<script type="text/javascript" src="/static/ace/snippets/python.js"></script>
</p>
<!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱-->
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>使用者可以利用以下編輯區執行 Brython 程式:</p>
<!-- 印出版次與關鍵字程式 -->
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<!-- 用來顯示程式碼的 editor 區域 -->
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --><form><label>Filename: <input type="text" id="kw_filename" placeholder="input file name">.py</label> <input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea id="kw_console" autocomplete="off"></textarea></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
import ace

def keyword(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['keyword'].bind('click',keyword)
</script>
</p>
<!-- ****************************** keyword end -->
<p></p>
<!-- ****************************** for1 start -->
<p>
<script type="text/python3">
from browser import document as doc
import ace

def for1(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''#for1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['for1'].bind('click',for1)
</script>
<!-- ****************************** for1 end --></p>
<p><!-- ***************************** hello start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 hello
hello = beditor.editor("""# 定義 helloWorld 函式, 然後呼叫執行
def helloWorld():
    print("Hello World!")
    # 同行列印
    print("first string ", end="")
    print("second string")

helloWorld()
""")
# id 為 "hello" 的按鈕點按時, 執行 hello 物件中的 prog 方法
doc["hello"].bind('click', hello.prog)
</script>
<!-- ***************************** hello end --></p>
<!-- ***************************** input start -->
<p>
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 inputEx
inputEx = beditor.editor("""# 利用 input() 取使用者輸入
name = input("Enter your name: ")
print("Your name is:", name)
#x = int(input("Enter a number: "))
#print("One half of", x, "=", x/2)
""")
# id 為 "inputEx" 的按鈕點按時, 執行 inputEx 物件中的 prog 方法
doc["inputEx"].bind('click', inputEx.prog)
</script>
</p>
<!-- ***************************** input end -->
<p></p>
<!-- ***************************** math start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
inputEx = beditor.editor("""# 導入 math 模組後, 使用模組方法
import math
print(math.factorial(20))
""")
doc["mathEx"].bind('click', inputEx.prog)
</script>
</p>
<!-- ***************************** math end -->
<p><button id="keyword">keyword</button><button id="for1">for1</button><button id="hello">hello</button><button id="inputEx">input</button><button id="mathEx">math</button></p><h2>內建函式</h2>
<p><a href="https://docs.python.org/3/library/functions.html">https://docs.python.org/3/library/functions.html</a>&nbsp;</p>
<p><a href="https://www.programiz.com/python-programming/methods/built-in">https://www.programiz.com/python-programming/methods/built-in</a>&nbsp;</p>
<table border="1" class="docutils"><colgroup><col width="21%"><col width="18%"><col width="20%"><col width="20%"><col width="22%"></colgroup>
<tbody valign="top">
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#abs" title="abs"><code class="xref py py-func docutils literal notranslate"><span class="pre">abs()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#delattr" title="delattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">delattr()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#hash" title="hash"><code class="xref py py-func docutils literal notranslate"><span class="pre">hash()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-memoryview"><code class="docutils literal notranslate"><span class="pre">memoryview()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-set"><code class="docutils literal notranslate"><span class="pre">set()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#all" title="all"><code class="xref py py-func docutils literal notranslate"><span class="pre">all()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-dict"><code class="docutils literal notranslate"><span class="pre">dict()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#help" title="help"><code class="xref py py-func docutils literal notranslate"><span class="pre">help()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#min" title="min"><code class="xref py py-func docutils literal notranslate"><span class="pre">min()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#setattr" title="setattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">setattr()</span></code></a></td>
</tr>
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#any" title="any"><code class="xref py py-func docutils literal notranslate"><span class="pre">any()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#dir" title="dir"><code class="xref py py-func docutils literal notranslate"><span class="pre">dir()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#hex" title="hex"><code class="xref py py-func docutils literal notranslate"><span class="pre">hex()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#next" title="next"><code class="xref py py-func docutils literal notranslate"><span class="pre">next()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#slice" title="slice"><code class="xref py py-func docutils literal notranslate"><span class="pre">slice()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#ascii" title="ascii"><code class="xref py py-func docutils literal notranslate"><span class="pre">ascii()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#divmod" title="divmod"><code class="xref py py-func docutils literal notranslate"><span class="pre">divmod()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#id" title="id"><code class="xref py py-func docutils literal notranslate"><span class="pre">id()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#object" title="object"><code class="xref py py-func docutils literal notranslate"><span class="pre">object()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#sorted" title="sorted"><code class="xref py py-func docutils literal notranslate"><span class="pre">sorted()</span></code></a></td>
</tr>
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#bin" title="bin"><code class="xref py py-func docutils literal notranslate"><span class="pre">bin()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#enumerate" title="enumerate"><code class="xref py py-func docutils literal notranslate"><span class="pre">enumerate()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#oct" title="oct"><code class="xref py py-func docutils literal notranslate"><span class="pre">oct()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#staticmethod" title="staticmethod"><code class="xref py py-func docutils literal notranslate"><span class="pre">staticmethod()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#bool" title="bool"><code class="xref py py-func docutils literal notranslate"><span class="pre">bool()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#int" title="int"><code class="xref py py-func docutils literal notranslate"><span class="pre">int()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-str"><code class="docutils literal notranslate"><span class="pre">str()</span></code></a></td>
</tr>
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#breakpoint" title="breakpoint"><code class="xref py py-func docutils literal notranslate"><span class="pre">breakpoint()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#exec" title="exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">exec()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#isinstance" title="isinstance"><code class="xref py py-func docutils literal notranslate"><span class="pre">isinstance()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#ord" title="ord"><code class="xref py py-func docutils literal notranslate"><span class="pre">ord()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#sum" title="sum"><code class="xref py py-func docutils literal notranslate"><span class="pre">sum()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-bytearray"><code class="docutils literal notranslate"><span class="pre">bytearray()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#filter" title="filter"><code class="xref py py-func docutils literal notranslate"><span class="pre">filter()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#issubclass" title="issubclass"><code class="xref py py-func docutils literal notranslate"><span class="pre">issubclass()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#pow" title="pow"><code class="xref py py-func docutils literal notranslate"><span class="pre">pow()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#super" title="super"><code class="xref py py-func docutils literal notranslate"><span class="pre">super()</span></code></a></td>
</tr>
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-bytes"><code class="docutils literal notranslate"><span class="pre">bytes()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#float" title="float"><code class="xref py py-func docutils literal notranslate"><span class="pre">float()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#iter" title="iter"><code class="xref py py-func docutils literal notranslate"><span class="pre">iter()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-tuple"><code class="docutils literal notranslate"><span class="pre">tuple()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#callable" title="callable"><code class="xref py py-func docutils literal notranslate"><span class="pre">callable()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#format" title="format"><code class="xref py py-func docutils literal notranslate"><span class="pre">format()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#len" title="len"><code class="xref py py-func docutils literal notranslate"><span class="pre">len()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#property" title="property"><code class="xref py py-func docutils literal notranslate"><span class="pre">property()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#type" title="type"><code class="xref py py-func docutils literal notranslate"><span class="pre">type()</span></code></a></td>
</tr>
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#chr" title="chr"><code class="xref py py-func docutils literal notranslate"><span class="pre">chr()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-frozenset"><code class="docutils literal notranslate"><span class="pre">frozenset()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-list"><code class="docutils literal notranslate"><span class="pre">list()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#func-range"><code class="docutils literal notranslate"><span class="pre">range()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#vars" title="vars"><code class="xref py py-func docutils literal notranslate"><span class="pre">vars()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#classmethod" title="classmethod"><code class="xref py py-func docutils literal notranslate"><span class="pre">classmethod()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#locals" title="locals"><code class="xref py py-func docutils literal notranslate"><span class="pre">locals()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#zip" title="zip"><code class="xref py py-func docutils literal notranslate"><span class="pre">zip()</span></code></a></td>
</tr>
<tr class="row-even">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#globals" title="globals"><code class="xref py py-func docutils literal notranslate"><span class="pre">globals()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#reversed" title="reversed"><code class="xref py py-func docutils literal notranslate"><span class="pre">reversed()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#__import__" title="__import__"><code class="xref py py-func docutils literal notranslate"><span class="pre">__import__()</span></code></a></td>
</tr>
<tr class="row-odd">
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#complex" title="complex"><code class="xref py py-func docutils literal notranslate"><span class="pre">complex()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#hasattr" title="hasattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">hasattr()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#max" title="max"><code class="xref py py-func docutils literal notranslate"><span class="pre">max()</span></code></a></td>
<td><a class="reference internal" href="https://docs.python.org/3/library/functions.html#round" title="round"><code class="xref py py-func docutils literal notranslate"><span class="pre">round()</span></code></a></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<!-- 導入 FileSaver 與 filereader -->
<p>
<script type="text/javascript" src="/static/ace/FileSaver.min.js"></script>
<script type="text/javascript" src="/static/ace/filereader.js"></script>
</p>
<!-- 導入 ace -->
<p>
<script type="text/javascript" src="/static/ace/ace.js"></script>
<script type="text/javascript" src="/static/ace/ext-language_tools.js"></script>
<script type="text/javascript" src="/static/ace/mode-python3.js"></script>
<script type="text/javascript" src="/static/ace/snippets/python.js"></script>
</p>
<!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱-->
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>使用者可以利用以下程式列出所使用 Python 的版次與關鍵字:</p>
<!-- 印出版次與關鍵字程式 -->
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<!-- 用來顯示程式碼的 editor 區域 -->
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --><form><label>Filename: <input type="text" id="kw_filename" placeholder="input file name">.py</label> <input type="submit" value="Save" onclick="doSave('kw_py_src', 'kw_filename');"></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea id="kw_console" autocomplete="off"></textarea></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
import ace

def keyword(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['keyword'].bind('click',keyword)
</script>
</p>
<!-- ****************************** keyword end -->
<p></p>
<!-- ****************************** for1 start -->
<p>
<script type="text/python3">
from browser import document as doc
import ace

def for1(ev):
    Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

    Ace.editor.setValue('''#for1 簡單的 for 迴圈範例
for i in range(10):
    print(i)
''')
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
doc['for1'].bind('click',for1)
</script>
<!-- ****************************** for1 end --></p>
<p><button id="keyword">keyword</button><button id="for1">for1</button></p><h2>iterable</h2>
<p>iterable 可迭代物件, 例如: range(5)</p>
<p>iterator 迭代器, 例如: list(range(5))</p>
<p>在 Python 程式語言中, iterable 為一能傳回 iterator, 且具有 __iter__ 方法的物件, 或者是一具有循序索引 (從 0 開始直到終了傳回 IndexError), 且具有 __getitem__ 方法的物件.</p>
<p>因此, 所謂 iterable 就是能夠傳回 iterator 的物件.</p>
<p>而&nbsp; iterator 則是具有 __next__ 方法的物件.</p>
<p>iterator:&nbsp;</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html#iterators">https://docs.python.org/3/tutorial/classes.html#iterators</a>&nbsp;</p>
<p><a href="https://docs.python.org/dev/howto/functional.html#iterators">https://docs.python.org/dev/howto/functional.html#iterators</a>&nbsp;</p>
<p>iterator types:</p>
<p><a href="https://docs.python.org/dev/library/stdtypes.html#iterator-types">https://docs.python.org/dev/library/stdtypes.html#iterator-types</a>&nbsp;</p>
<h4>參考資料</h4>
<p><a href="https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration">https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration</a>&nbsp;</p>
<p><a href="https://www.kawabangga.com/posts/2772">https://www.kawabangga.com/posts/2772</a>&nbsp;</p>
<p><a href="http://treyhunner.com/2018/02/python-range-is-not-an-iterator/">http://treyhunner.com/2018/02/python-range-is-not-an-iterator/</a>&nbsp;</p>
<p></p><h1>OnShape 手冊</h1>
<p><a href="https://www.onshape.com/">https://www.onshape.com/</a>&nbsp;</p>
<p>電腦輔助設計實習課程教材:&nbsp;<a href="http://mde.tw/cadp2018/content/">http://mde.tw/cadp2018/content/</a>&nbsp;</p><h1>Fusion 360</h1>
<p><a href="https://www.autodesk.com/products/fusion-360/students-teachers-educators">https://www.autodesk.com/products/fusion-360/students-teachers-educators</a>&nbsp;</p>